import uart;
import edge;
import resetter;
import lfsr;

mod Top {
    incoming clock      : Clock; // 12MHz

    outgoing uart_tx    : Bit;
    incoming uart_rx    : Bit;

    outgoing led_0      : Bit;
    outgoing led_1      : Bit;
    outgoing led_2      : Bit;
    outgoing led_3      : Bit;
    outgoing led_4      : Bit;

    node reset : Bit;

    mod resetter of resetter::Resetter;
    resetter.clock := clock;
    reset := resetter.out;

    mod uart_receiver of uart::UartReceiver;
    uart_receiver.clock := clock;
    uart_receiver.reset := reset;
    uart_receiver.uart_rx := uart_rx;

    mod uart_sender of uart::UartSender;
    uart_sender.clock := clock;
    uart_sender.reset := reset;
    uart_sender.data  := uart_receiver.data;
    uart_sender.data_valid := edge_detector.out;

    mod edge_detector of edge::Edge;
    edge_detector.clock := clock;
    edge_detector.inp := uart_receiver.data_valid;

    uart_tx := uart_sender.uart_tx;

    reg counter : Word[32] on clock;
    counter <= counter->inc();

    mod led_controller of LedController;
    led_controller.clock := clock;
    led_controller.reset := reset;
    led_controller.set_random := uart_receiver.data_valid->and(uart_receiver.data->eq(114));
    led_controller.set_idle := uart_receiver.data_valid->and(uart_receiver.data->eq(105));
    led_controller.set_cw := uart_receiver.data_valid->and(uart_receiver.data->eq(99));
    led_controller.set_ccw := uart_receiver.data_valid->and(uart_receiver.data->eq(119));
    led_controller.set_rate := rate->eq(0)->not();

    node rate : Word[3];
    rate := 
        if uart_receiver.data->eq(49) {
            1
        } else if uart_receiver.data->eq(50) {
            2
        } else if uart_receiver.data->eq(51) {
            3
        } else if uart_receiver.data->eq(52) {
            4
        } else if uart_receiver.data->eq(53) {
            5
        } else if uart_receiver.data->eq(54) {
            6
        } else if uart_receiver.data->eq(55) {
            7
        } else {
            0
        };
    led_controller.rate := rate;

    led_0 := led_controller.leds[0];
    led_1 := led_controller.leds[1];
    led_2 := led_controller.leds[2];
    led_3 := led_controller.leds[3];
    led_4 := led_controller.leds[4];
}

union type LedControllerState {
    Idle(round : Word[4], next : Bit);
    SpinCW(x : Word[5], round : Word[4]);
    SpinCCW(x : Word[5], round : Word[4]);
    Memory(addr : Word[16]);
    Random(leds : Word[5]);
}

mod LedController {
    incoming clock      : Clock; // 12MHz
    incoming reset      : Bit;
    outgoing leds       : Word[5];

    incoming set_random : Bit;
    incoming set_cw     : Bit;
    incoming set_ccw    : Bit;
    incoming set_idle   : Bit;
    incoming set_rate   : Bit;
    incoming rate       : Word[3];

    reg counter : Word[32] on clock;
    counter <= counter->inc();


    reg rate_reg : Word[3] on clock;
    rate_reg <= if set_rate {
        rate
    } else {
        rate_reg
    };

    mod edge_detector of edge::Edge;
    edge_detector.clock := clock;
    edge_detector.inp   :=
        if rate_reg->eq(0) {
            counter[25]
        } else if rate_reg->eq(1) {
            counter[24]
        } else if rate_reg->eq(2) {
            counter[23]
        } else if rate_reg->eq(3) {
            counter[22]
        } else if rate_reg->eq(4) {
            counter[21]
        } else if rate_reg->eq(5) {
            counter[20]
        } else if rate_reg->eq(6) {
            counter[19]
        } else if rate_reg->eq(7) {
            counter[18]
        } else {
            counter[17]
        };

    node change : Bit;
    change := edge_detector.out;

    reg state : LedControllerState on clock;
    state <= if reset {
        //@Idle(0, 0)
        @Memory(0)
    } else if set_random {
        //@Random(lfsr.out[5..0])
        @Memory(0)
    } else if set_idle {
        @Idle(0, false)
    } else if set_cw {
        @SpinCW(1, 0)
    } else if set_ccw {
        @SpinCCW(8, 0)
    } else if change {
        match state {
            @Idle(round, next) => if round->lt(3) {
                @Idle(round->inc(), next)
            } else if next {
                @SpinCCW(8, 0)
            } else {
                @SpinCW(1, 0)
            };
            @SpinCW(x, round) => if x->eq(8) {
                if round->lt(3) {
                    @SpinCW(1, round->inc())
                } else {
                    @Idle(0, true)
                }
            } else {
                @SpinCW(x->sll(1), round)
            };
            @SpinCCW(x, round) => if x->eq(1) {
                if round->lt(3) {
                    @SpinCCW(8, round->inc())
                } else {
                    @Idle(0, false)
                }
            } else {
                @SpinCCW(x->srl(1), round)
            };
            @Random(leds) => @Random(lfsr.out[5..0]);
            @Memory(addr) => if addr->lt(16) {
                @Memory(addr->inc())
            } else {
                @Memory(0)
            };
        }
    } else {
        state
    };

    mod lfsr of lfsr::Lfsr;
    lfsr.clock := clock;
    lfsr.reset := reset;

    leds := match state {
        @Idle(round, next) => 0;
        @SpinCW(leds, round) => leds;
        @SpinCCW(leds, round) => leds;
        @Random(leds) => leds;
        @Memory(addr) => mem.read_data[5..0];
    };

    mod mem of Memory;
    mem.clock := clock;
    mem.read_addr := match state {
        @Idle(x, y) => 0;
        @SpinCW(x, y) => 0;
        @SpinCCW(x, y) => 0;
        @Random(leds) => 0;
        @Memory(addr) => addr;
    };
}

ext mod Memory {
    incoming clock : Clock;
    incoming read_addr : Word[16];
    outgoing read_data : Word[8];
}
