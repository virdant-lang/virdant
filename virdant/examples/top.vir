mod Top {
    incoming clock : Clock;
    incoming inp : Word[8];
    outgoing out : Word[8];

    reg r : Word[8] on inp;
    r <= inp;

    node foo : Foo;
    foo := @Invalid();

//    out := match foo {
//        @Invalid() => 0;
//        @Valid(payload) => cat(payload, 0w1);
//    };
//    out := cat(0w7, cat(0w4, 0w4)->get(inp[3..0]));

    node bar : Bar;
    bar := $Bar {
        x = true,
        y = 0w8,
    };

    out := bar->y;
}

union type Foo {
    Invalid();
    Valid(payload : Word[7]);
}

struct type Bar {
    x : Bit;
    y : Word[8];
}
