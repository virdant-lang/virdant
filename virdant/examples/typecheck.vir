mod Top {
    wire bit0 : Bit;
    bit0 := true;

    wire bit1 : Bit;
    bit1 := false;

    wire word0 : Word[8];
    word0 := 0w8;

    wire word1 : Word[8];
    word1 := 0;

    wire if0 : Word[8];
    if0 :=
        if bit0 {
            0
        } else {
            1
        };

    wire word0 : Word[8];
    word0 := word(0w4, 15w4);

    wire word1 : Word[8];
    word1 := word(0w7, true);

    wire word2 : Word[8];
    word2 := word(true, true, false, false, true, false, true, false);

    wire word3 : Word[8];
    word3 := word(#foo[Foo], #bar[Foo], #baz[Foo], true, false);

    wire union0 : ValidByte;
    union0 := @Valid(0);

    wire match0 : Word[8];
    match0 :=
        match union0 {
            @Invalid() => 0;
            @Valid(payload) => payload;
        };

    wire match1 : Word[8];
    match1 :=
        match union0 : ValidByte {
            @Invalid() => 0;
            @Valid(payload) => payload;
        };

    wire struct0 : Pair;
    struct0 :=
        $Pair {
            x = true,
            y = 0,
        };

    wire struct1 : Bit;
    struct1 := struct0->x;

    wire struct2 : Word[8];
    struct2 := struct0->y;

    wire ascription : Word[8];
    ascription := 0[Word[8]];

    wire word_on_bit : Word[8];
    word_on_bit := word(0w7, false);

    wire word_on_enum : Word[8];
    word_on_enum := word(0w6, #foo[Foo]);

    wire test_zext : Word[8];
    test_zext := zext(0w5);

    wire test_sext : Word[8];
    test_sext := sext(0b100w3);
}

union type ValidByte {
    Invalid();
    Valid(payload : Word[8]);
}

struct type Pair {
    x : Bit;
    y : Word[8];
}

enum type Foo width 2 {
    foo = 0b01;
    bar = 0b10;
    baz = 0b11;
}
